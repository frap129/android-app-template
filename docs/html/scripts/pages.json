[{"name":"class MainActivity : TemplateActivity","description":"dev.maples.template.MainActivity","location":"app/dev.maples.template/-main-activity/index.html","searchKeys":["MainActivity","class MainActivity : TemplateActivity","dev.maples.template.MainActivity"]},{"name":"constructor()","description":"dev.maples.template.MainActivity.MainActivity","location":"app/dev.maples.template/-main-activity/-main-activity.html","searchKeys":["MainActivity","constructor()","dev.maples.template.MainActivity.MainActivity"]},{"name":"const val ANIMATION_DURATION: Int = 250","description":"core.ui.theme.ANIMATION_DURATION","location":"core/ui/core.ui.theme/-a-n-i-m-a-t-i-o-n_-d-u-r-a-t-i-o-n.html","searchKeys":["ANIMATION_DURATION","const val ANIMATION_DURATION: Int = 250","core.ui.theme.ANIMATION_DURATION"]},{"name":"constructor(icon: Int, title: String)","description":"core.ui.model.data.DestinationNavBarItem.DestinationNavBarItem","location":"core/ui/core.ui.model.data/-destination-nav-bar-item/-destination-nav-bar-item.html","searchKeys":["DestinationNavBarItem","constructor(icon: Int, title: String)","core.ui.model.data.DestinationNavBarItem.DestinationNavBarItem"]},{"name":"constructor(route: String, content: (NavController, NavBackStackEntry) -> Unit, deepLinks: List<NavDeepLink> = emptyList(), enterTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition?? = {\n        fadeIn(animationSpec = tween(ANIMATION_DURATION))\n    }, exitTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition?? = {\n        fadeOut(animationSpec = tween(ANIMATION_DURATION))\n    }, arguments: List<NamedNavArgument> = emptyList(), showNavBar: Boolean = false, navBarItem: DestinationNavBarItem? = null)","description":"core.ui.model.data.Destination.Destination","location":"core/ui/core.ui.model.data/-destination/-destination.html","searchKeys":["Destination","constructor(route: String, content: (NavController, NavBackStackEntry) -> Unit, deepLinks: List<NavDeepLink> = emptyList(), enterTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition?? = {\n        fadeIn(animationSpec = tween(ANIMATION_DURATION))\n    }, exitTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition?? = {\n        fadeOut(animationSpec = tween(ANIMATION_DURATION))\n    }, arguments: List<NamedNavArgument> = emptyList(), showNavBar: Boolean = false, navBarItem: DestinationNavBarItem? = null)","core.ui.model.data.Destination.Destination"]},{"name":"fun App(destinations: List<Destination>)","description":"core.ui.App","location":"core/ui/core.ui/-app.html","searchKeys":["App","fun App(destinations: List<Destination>)","core.ui.App"]},{"name":"fun AppFrame(content: () -> Unit)","description":"core.ui.AppFrame","location":"core/ui/core.ui/-app-frame.html","searchKeys":["AppFrame","fun AppFrame(content: () -> Unit)","core.ui.AppFrame"]},{"name":"fun AppTheme(darkTheme: Boolean = isSystemInDarkTheme(), dynamicColor: Boolean = true, content: () -> Unit)","description":"core.ui.theme.AppTheme","location":"core/ui/core.ui.theme/-app-theme.html","searchKeys":["AppTheme","fun AppTheme(darkTheme: Boolean = isSystemInDarkTheme(), dynamicColor: Boolean = true, content: () -> Unit)","core.ui.theme.AppTheme"]},{"name":"fun getColorScheme(accent: Color, backgroundLight: Color, backgroundMid: Color, backgroundDark: Color): ColorScheme","description":"core.ui.theme.getColorScheme","location":"core/ui/core.ui.theme/get-color-scheme.html","searchKeys":["getColorScheme","fun getColorScheme(accent: Color, backgroundLight: Color, backgroundMid: Color, backgroundDark: Color): ColorScheme","core.ui.theme.getColorScheme"]},{"name":"fun getTypography(): Typography","description":"core.ui.theme.getTypography","location":"core/ui/core.ui.theme/get-typography.html","searchKeys":["getTypography","fun getTypography(): Typography","core.ui.theme.getTypography"]},{"name":"open class Destination(val route: String, val content: (NavController, NavBackStackEntry) -> Unit, val deepLinks: List<NavDeepLink> = emptyList(), val enterTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition?? = {\n        fadeIn(animationSpec = tween(ANIMATION_DURATION))\n    }, val exitTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition?? = {\n        fadeOut(animationSpec = tween(ANIMATION_DURATION))\n    }, val arguments: List<NamedNavArgument> = emptyList(), val showNavBar: Boolean = false, val navBarItem: DestinationNavBarItem? = null)","description":"core.ui.model.data.Destination","location":"core/ui/core.ui.model.data/-destination/index.html","searchKeys":["Destination","open class Destination(val route: String, val content: (NavController, NavBackStackEntry) -> Unit, val deepLinks: List<NavDeepLink> = emptyList(), val enterTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition?? = {\n        fadeIn(animationSpec = tween(ANIMATION_DURATION))\n    }, val exitTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition?? = {\n        fadeOut(animationSpec = tween(ANIMATION_DURATION))\n    }, val arguments: List<NamedNavArgument> = emptyList(), val showNavBar: Boolean = false, val navBarItem: DestinationNavBarItem? = null)","core.ui.model.data.Destination"]},{"name":"open class DestinationNavBarItem(val icon: Int, val title: String)","description":"core.ui.model.data.DestinationNavBarItem","location":"core/ui/core.ui.model.data/-destination-nav-bar-item/index.html","searchKeys":["DestinationNavBarItem","open class DestinationNavBarItem(val icon: Int, val title: String)","core.ui.model.data.DestinationNavBarItem"]},{"name":"open val arguments: List<NamedNavArgument>","description":"core.ui.model.data.Destination.arguments","location":"core/ui/core.ui.model.data/-destination/arguments.html","searchKeys":["arguments","open val arguments: List<NamedNavArgument>","core.ui.model.data.Destination.arguments"]},{"name":"open val content: (NavController, NavBackStackEntry) -> Unit","description":"core.ui.model.data.Destination.content","location":"core/ui/core.ui.model.data/-destination/content.html","searchKeys":["content","open val content: (NavController, NavBackStackEntry) -> Unit","core.ui.model.data.Destination.content"]},{"name":"open val deepLinks: List<NavDeepLink>","description":"core.ui.model.data.Destination.deepLinks","location":"core/ui/core.ui.model.data/-destination/deep-links.html","searchKeys":["deepLinks","open val deepLinks: List<NavDeepLink>","core.ui.model.data.Destination.deepLinks"]},{"name":"open val enterTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition??","description":"core.ui.model.data.Destination.enterTransition","location":"core/ui/core.ui.model.data/-destination/enter-transition.html","searchKeys":["enterTransition","open val enterTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> EnterTransition??","core.ui.model.data.Destination.enterTransition"]},{"name":"open val exitTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition??","description":"core.ui.model.data.Destination.exitTransition","location":"core/ui/core.ui.model.data/-destination/exit-transition.html","searchKeys":["exitTransition","open val exitTransition: AnimatedContentTransitionScope<NavBackStackEntry>.() -> ExitTransition??","core.ui.model.data.Destination.exitTransition"]},{"name":"open val navBarItem: DestinationNavBarItem? = null","description":"core.ui.model.data.Destination.navBarItem","location":"core/ui/core.ui.model.data/-destination/nav-bar-item.html","searchKeys":["navBarItem","open val navBarItem: DestinationNavBarItem? = null","core.ui.model.data.Destination.navBarItem"]},{"name":"open val route: String","description":"core.ui.model.data.Destination.route","location":"core/ui/core.ui.model.data/-destination/route.html","searchKeys":["route","open val route: String","core.ui.model.data.Destination.route"]},{"name":"open val showNavBar: Boolean = false","description":"core.ui.model.data.Destination.showNavBar","location":"core/ui/core.ui.model.data/-destination/show-nav-bar.html","searchKeys":["showNavBar","open val showNavBar: Boolean = false","core.ui.model.data.Destination.showNavBar"]},{"name":"val icon: Int","description":"core.ui.model.data.DestinationNavBarItem.icon","location":"core/ui/core.ui.model.data/-destination-nav-bar-item/icon.html","searchKeys":["icon","val icon: Int","core.ui.model.data.DestinationNavBarItem.icon"]},{"name":"val title: String","description":"core.ui.model.data.DestinationNavBarItem.title","location":"core/ui/core.ui.model.data/-destination-nav-bar-item/title.html","searchKeys":["title","val title: String","core.ui.model.data.DestinationNavBarItem.title"]},{"name":"fun launchInBackground(block: suspend CoroutineScope.() -> Unit): Job","description":"core.util.launchInBackground","location":"core/util/core.util/launch-in-background.html","searchKeys":["launchInBackground","fun launchInBackground(block: suspend CoroutineScope.() -> Unit): Job","core.util.launchInBackground"]},{"name":"class MainApplication : Application","description":"core.lifecycle.MainApplication","location":"core/lifecycle/core.lifecycle/-main-application/index.html","searchKeys":["MainApplication","class MainApplication : Application","core.lifecycle.MainApplication"]},{"name":"constructor()","description":"core.lifecycle.MainApplication.MainApplication","location":"core/lifecycle/core.lifecycle/-main-application/-main-application.html","searchKeys":["MainApplication","constructor()","core.lifecycle.MainApplication.MainApplication"]},{"name":"constructor()","description":"core.lifecycle.TemplateActivity.TemplateActivity","location":"core/lifecycle/core.lifecycle/-template-activity/-template-activity.html","searchKeys":["TemplateActivity","constructor()","core.lifecycle.TemplateActivity.TemplateActivity"]},{"name":"open class TemplateActivity : ComponentActivity","description":"core.lifecycle.TemplateActivity","location":"core/lifecycle/core.lifecycle/-template-activity/index.html","searchKeys":["TemplateActivity","open class TemplateActivity : ComponentActivity","core.lifecycle.TemplateActivity"]},{"name":"open override fun onCreate()","description":"core.lifecycle.MainApplication.onCreate","location":"core/lifecycle/core.lifecycle/-main-application/on-create.html","searchKeys":["onCreate","open override fun onCreate()","core.lifecycle.MainApplication.onCreate"]}]